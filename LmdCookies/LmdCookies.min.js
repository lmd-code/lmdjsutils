/**
 * LmdCookies - a lightweight wrapper for browser cookies
 * @copyright LMD-Code 2022
 * @see https://github.com/lmd-code/lmdjsutils/
 * @version 1.1.1
 * @license CC0-1.0
 */
"use strict";class LmdCookies{constructor(prefix=null,path=null,domain=null,secure=!1,sameSite="lax"){this.cookiePrefix="string"==typeof prefix&&""!==prefix?prefix+"_":"",this.cookiePath="string"==typeof path&&""!==path?path:null,this.cookieDomain="string"==typeof domain&&""!==domain?domain:null,this.cookieSecure="boolean"==typeof secure&&secure,this.cookieSamesite="string"==typeof sameSite&&""!==sameSite?sameSite:"lax",this._isEnabled=null,this.cookiePrefixEnc=""!==this.cookiePrefix?encodeURIComponent(prefix)+"_":"","none"===this.cookieSamesite&&(this.cookieSecure=!0,console.warn(`${this.constructor.name}: where 'SameSite' is set to 'none' (cross-site access allowed), 'secure' must be set to 'true' (access over 'HTTPS' only), or it may be rejected by modern browsers. If the domain serving the cookie does not have HTTPS, then you can not specify 'none' for 'SameSite'.`)),this.data=this.getCookies()}get isEnabled(){if(void 0===this._isEnabled||null===this._isEnabled){const testKey="_lmdcookies_test";if(-1!=document.cookie.indexOf(testKey))this._isEnabled=!0;else try{if(!navigator.cookieEnabled)throw"NO_COOKIE";if(document.cookie=testKey+"=LmdCookiesTest;SameSite=Strict",-1==document.cookie.indexOf(testKey))throw"NO_COOKIE";this._isEnabled=!0}catch(e){this._isEnabled=!1,console.warn(`${this.constructor.name}: Cookies are not available/enabled.`)}}return this._isEnabled}get count(){return void 0===this.data||null===this.data?0:Object.keys(this.data).length}has(name){const cookieName=this.cookiePrefix+name;return cookieName in this.data}get(name){const cookieName=this.cookiePrefix+name;if(cookieName in this.data)return this.data[cookieName]}set(name,value,expires="session"){try{let cookieText=this.cookiePrefixEnc+encodeURIComponent(name)+"=";cookieText+=encodeURIComponent(JSON.stringify(value)),"session"!==expires&&(cookieText+="; expires="+LmdCookies.calcExpiresDate(expires)),this.cookiePath&&(cookieText+="; path="+this.cookiePath),this.cookieDomain&&(cookieText+="; domain="+this.cookieDomain),this.cookieSecure&&(cookieText+="; secure"),cookieText+="; samesite="+this.cookieSamesite,document.cookie=cookieText,this.data=this.getCookies()}catch(e){console.error(`${this.constructor.name}: could not create/update '${name}'.\n${e.message}`)}}remove(name){this.set(name,"",new Date(0))}getCookies(){const cookies=document.cookie.split(/\s*;\s*/).filter(item=>item);let cookieJar=Object.create(null);if(Array.isArray(cookies)&&cookies.length>0)for(const cookie of cookies){if(""!==this.cookiePrefixEnc&&0!==cookie.indexOf(this.cookiePrefixEnc))continue;const[key,val]=cookie.split("=").map(item=>decodeURIComponent(item));try{cookieJar[key]=JSON.parse(val)}catch(e){console.error(`${this.constructor.name}: could not get value of '${key}'.\n${e.message}`),cookieJar[key]=null}}return cookieJar}static calcExpiresDate(expires){if(expires instanceof Date)return expires.toUTCString();const now=new Date,tokens=expires.split(/\s+/).filter(val=>val);if(Array.isArray(tokens)&&tokens.length>0)for(let i=0;i<tokens.length;i++){let[match,num,tok]=tokens[i].match(/(\d+)(\w+)/i);switch(tok=tok.toUpperCase(),num=parseInt(num),tok){case"Y":now.setUTCFullYear(now.getUTCFullYear()+num);break;case"M":now.setUTCMonth(now.getUTCMonth()+num);break;case"D":now.setUTCDate(now.getUTCDate()+num);break;case"H":now.setUTCHours(now.getUTCHours()+num);break;case"MI":now.setUTCMinutes(now.getUTCMinutes()+num);break;case"S":now.setUTCSeconds(now.getUTCSeconds()+num);break;case"W":now.setUTCDate(now.getUTCDate()+7*num)}}else now.setUTCFullYear(now.getUTCFullYear()+1);return now.toUTCString()}}